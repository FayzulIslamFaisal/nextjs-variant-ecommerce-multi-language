generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  phone     String?

  reviews   Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String    @unique
  description        String?
  price              Float
  isPublished        Boolean   @default(false)
  listPrice          Float?
  countInStock       Int?
  image              String[]  @default([])
  sizes              String[]  @default(["S", "M", "L"])
  colors             String[]  @default(["Red", "Black","White"])
  avgRating          Float?    @default(0)
  numReviews         Int?      @default(0)
  ratingDistribution Int[]     @default([]) 
  numSales  Int?      @default(0)

  reviews             Review[]
  tags               ProductTags[] 
  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  brandId    String?   @db.ObjectId
  brand      Brand?    @relation(fields: [brandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  rating    Int      @default(0)
  comment   String?

  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Category {
  id       String    @id @map("_id") @default(auto()) @db.ObjectId
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Brand {
  id       String    @id @map("_id") @default(auto()) @db.ObjectId
  name     String    @unique
  products Product[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  ProductTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTags {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tagId     String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, tagId])
}

